什么是selenium模块：
    基于浏览器自动化的一个模块
selenium模块优点：
    便捷获取网站中动态加载的数据
    便捷实现模拟代理

selenium使用流程：
    环境准备：
        pip install selenium
        下载目标浏览器对应的驱动程序
    1. 实例化浏览器对象(browser = selenium.webdriver.Chrome(executable_path='chromedriver.exe'))
    2. 编写基于浏览器自动化的操作代码
        发请求：browser.get(url)
        标签定位：tag = browser.find系列方法
        标签交互：tag.send_keys('xxx')
        执行js程序：browser.excute_script('js_code')
        前进，后退：browser.back()/forward()
        关闭浏览器：browser.quit()
        获取网页HTML源码：browser.page_source
        窗口最大化：browser.maximize_window()
        关闭浏览器：browser.quit()

selenium处理iframe:
    如果定位的标签是存在于iframe标签之中，则必须切换frame后才可以定位标签
        bro.switch_to.frame('id')
    动作链（拖动）：from selenium.webdriver import ActionChains
        实例化动作链对象：action = ActionChains(bro)
        action.click_and_hold(div)：点击并长按
        action.release(): 释放鼠标
        action.click(): 鼠标点击一下
        action.move_by_offset(x, y)：移动一定的距离
        action.move_to_element_with_offset(element, x, y): 移动到目标距离
        action.perform()：让动作链立即执行


selenium设置chrome浏览器为headless模式(无浏览器窗口，后台运行)
    from selenium.webdriver.chrome.options import Options
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    bro = Chrome('chromedriver.exe', chrome_options=chrome_options) #修改 chromedriver.exe 所在路径

selenium设置chrome浏览器规避检测
    from selenium.webdriver import ChromeOptions
    option = ChromeOptions()
    option.add_experimental_option('excludeSwitches', ['enable-automation'])
    bro = Chrome('chromedriver.exe', options=option) #修改 chromedriver.exe 所在路径

自动识别验证码平台：超级鹰 http://www.chaojiying.com
    注册，登录：普通用户
    步骤：
        1. 题分查询：充值
        2. 创建软件（记录软件id）
        3. 下载示例代码（替换示例代码中的信息）
